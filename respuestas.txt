18. Ejecuta la instruccion directamente, saliendo por pantalla el "Hola Mundo".

21. Las comillas simples es para coger todo lo que se encuentre dentro de ellas, mientras que las dobles solo coge la cadena que introducimos, es decir, sin \t\n.

22. Sirve para introducir entre comillas todo lo que pongamos dentro de las llaves.

=> "hello world\\n"
=> "'a' 'b' 'c'"

23. Sirve para introducir todo lo que metemos dentro, ademas de que introduce las \.

=> "hello world\n"
=> "\"a\" \"b\" \"c\""

24.

=> "--4--\n--2--\n"

25. 

=> "--\#{a}--\n--\#{b}--\n"

26. 

a. => "he"
b. => "o"
c. => "hello"

27. 

=> "hello world"

28. => "..."

29. => "2 2 2 "

30. Introduce entre comillas cada una de las palabras.

=> ["this", "is", "a", "test"]

31. Introduce una \ además de lo introducido entre comillas.

=> ["\\t", "\\n"]

32. Pone entre comillas lo introducido, dividido en palabras pero sin añadir una \ extra.

=> ["\t", "\n"]

33. Un array de tres valores, todos de valor 'nils'.

=> ["\t", "\n"]

34. Un array de tres valores, todos de valor '0'.

=> [0, 0, 0]

35.

=> [[1, 2], [3, 4]]

36.

=> [0, 2, 4]

37.

a. => ["b"]
b. => ["d", "e"]
c. => ["a", "b", "c"]
d. => ["a"]
e. => ["d", "e"]

38. 

a. => ["A", "B", "c", "d", "e"]
b. => ["A", "B", "C", "D", "E"]
c. => ["C", "D", "E"]
d. => ["C", "D", "Z"]
e. => ["C", nil]

39. 

a. => [1, 2, 3]
b. => [1, 2, 3, 4, 5]
c. => [1, 2, 3, 4, 5, [6, 7, 8]]

40. 

a. => ["a", "b", "c", "d", "e"]
b. => ["a", "e"]

41.

=> [0, 0, 0, 0, 0, 0, 0, 0]

42.

a. => [1]
b. => [1, 2, 3]
c. => [1, 2, 3, [4, 5, 6]]
d.  => [1, 2, 3, [4, 5, 6], 7, 8]

43. 

a. => [1, 2, 3, 4, 5]
b. => [5, 4, 3, 2, 1]
c. => [2, 3, 4]
d. => [4, 3, 2]


44. 

a. => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b. => [1, 2, 3, 4, 5, 6, 7, 8, 9]
c. => false
d. => true
e. 1 3 5 7 9  => 1...10

45.

a. => true
b. => true
c. => true

46.

a. => TrueClass
b. => FalseClass
c. hello
   => nil
d. => nil
e. hello
   => ni

47.

a. => Symbol
b. => false
c. => true
d. => Symbol
e. => true
f. => true

48.

a. Rub => nil
b. RubJava => nil

49. No sale nada.

50. Con los comandos descritos asignamos unos valores y realizamos una serie de operaciones.

51. 

a. => [:a, :b]
b. => [1, 2]
c. => {:a=>1, :b=>2, :c=>3}
d. => {:a=>1, :b=>2, :c=>3}
e. => 1
f. => {:a=>1}
g. => {:a=>1}

52. Un metodo puede usar el bloque mediante la palabra dicha en el ejercicio (yield).

53. No tienen diferencia alguna, pues se puede observar que dan como resultado lo mismo.

54.

 => ["hello", "world", "hello", "LPP"]

55. Coloca los valores que hemos asignado fuera de las llaves.



